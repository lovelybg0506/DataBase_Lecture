cmd

-관리자 로그인
SQL>system/oracle

-오라클 웹포트 번호 보기
SQL>select dbms_xdb.gethttpport() from dual;
DBMS _XDB.GETHTTPPORT()
----------------------------------
		8080
- 오라클 웹포트 번호 바꾸기
SQL>exec dbms_xdb.sethttpport(9090);

-오라클 웹포트 변경 확인하기
SQL>select dbms_xdb.gethttpport() from dual;
DBMS _XDB.GETHTTPPORT()
-----------------------------------
		9090

-오라클 서버에 접속
SQL>sqlplus system/1234(오라클 설치시 암호)

-사용자 계정 scott 만들기
SQL>create user scott identified by tiger;

-scott 계정에 권한(데이터베이스 접속과 테이블 생성) 부여하기
SQL>grant connect,resource to scott;

-scott 계정에 권한(뷰 생성) 부여하기
SQL> grant create view to scott;

-현재 사용자 확인하기
SQL>show user

-SQL*PLUS 툴에서 빠져나오기
SQL>exit

-다시 접속
-sqlplus scott/tiger

-테이블 만들기
SQL> create table member(
    name varchar2(10),
    userid varchar2(10),
    pwd varchar2(10),
    email varchar2(20), -- 가변형 글자(주소,이메일)
    phone char(13), -- 고정된 글자(학번,우편번호)
    admin number(1) default 0, -- 0:사용자 1:관리자
    primary key(userid) -- 무결성 제약 조건(Data Integrity Constraint Rule)
    );

-테이블에 레코드 추가
insert into member values('이소미','somi','1234','gmd@naver.com','010-2362-5157',0);
insert into member values('하상호','sang','1234','ha12@naver.com','010-5629-8888',1);
insert into member values('김윤승','light','1234','yoon1004@naver.com','010-9999-8282',0);

-member 테이블에 저장된 모든 레코드 출력하기
select * from member;

-영구적 저장
commit;

-where 조건
select * from member where userid='somi';
select * from member where admin=1;

-레코드 변경
update member set phone='010-1155-5678' where userid='somi';

-레코드 삭제
delete member where userid='somi';

-확인
select * from member;

-테이블을 삭제하기 위해서 사용되며, 저장 되어있던 데이터도 함께 삭제된다.
drop table member;

-컬럼 변경 : alter table

 컬럼의 데이터 타입,길이 변경 : modify
alter table board modify title varchar2(20);

 컬럼명 변경 : rename column
alter table board rename column auther to author

-테이블 구조 확인
desc(describe) 테이블 명;

-테이블에 레코드 추가
insert into board (num,title,author,content)
values(1,'테스트','홍길동','테스트입니다');

select * from board;
commit;

-테이블 종류 확인
select * from tab;

-제약조건(Constraints)
 primary key : 레코드의 중복을 방지,반드시 유일한 값, NULL 허용 안됨 PK
 unique : 반드시 유일한 값, NULL 값을 허용 UK
 not null : 반드시 값을 가져야 한다
 check : 지정한 조건에 일치하는 데이터 값만 저장 가능 CK

create table customer(
id number(4) constraint customer_id_pk primary key, -- [제약조건키워드 제약조건이름] 제약조건
	    [            생략가능          ]
name varchar2(10) constraint customer_name_nn not null,
	           [		생략가능            ]
address varchar2(50) unique,
age number(3) constraint customer_age_ck check(age>=30)
);

-시퀀스(Sequence)
 값이 자동 증가(객체)
 테이블 내의 정수 값을 가지는 기본키에 사용 될 수 있다

create table myboard(
num number(4) primary key,
author varchar2(10),
title varchar2(20),
content varchar2(100)
);

-create sequence 시퀀스명칭
create sequence myboard_seq;

insert into myboard (num,title,author,content)
values(myboard_seq.nextval,'홍길동','테스트','테스트입니다');

insert into myboard (num,title,author,content)
values(myboard_seq.nextval,'홍길동2','테스트2','테스트입니다');

select num,author,title from myboard;

drop sequence myboard_seq;

update myboard set num=1 where num=2;
update myboard set num=2 where num=3;

create table emp(
emp_id varchar2(10) primary key,
ename varchar2(10),
salary number(5),
depart varchar2(10)
);

insert into emp values('a111','홍길동',2000,'관리');
insert into emp values('a222','이순신',4000,'개발');
insert into emp values('a333','유관순',3500,'영업');
insert into emp values('a444','강감찬',4500,'개발');
insert into emp values('a555','이성계',5500,'관리');
insert into emp values('a666','나신입',1800,null);

select emp_id,ename from emp;
select * from emp;
select ename,salary,salary*12 from emp;

select ename as 사원명 ,salary 월급 from emp;  -- 'as' 명칭바꾸기

select depart from emp;

select distinct depart from emp; -- 중복제거

-where 조건
select emp_id,ename
from emp
where salary >=3000;

SELECT emp_id,ename,salary
FROM emp
WHERE emp_id='a111';

-between a and b 특정 범위의 값을 검색
select emp_id,ename,salary
from emp
where salary between 2000 and 4000;

-in : 여러개의 값을 동시에 비교
select emp_id,ename,salary
from emp
where ename in('홍길동','이순신');

-in 비교
select emp_id,ename,salary
from emp
where emp_id in('a111','a222','a333');

-like 정확하게 일치하는 경우가 아닌 임의의 문자 또는 문자열을
 포함한 데이터를 검색 할 때 사용
 와일드 카드 문자
 % (percent) : 없거나 여러 개의 문자를 대체한다.
 _ (underbar) : 하나의 문자를 대체한다.

select emp_id,ename,salary
from emp
where ename like '이%';

select emp_id,ename,salary
from emp
where ename like '%순';

select emp_id,ename,salary
from emp
where ename like '%신%';	// '신'이라는 글자가 맨 마지막에 들어가는 경우도 포함 ('없거나' 여러개의 문자대체)

select emp_id,ename,salary
from emp
where ename like '__동%';

-is null 컬럼의 데이터 중에서 null 값을 얻을 때
select emp_id,ename,salary
from emp
where depart is null; // 처음에 null 값을 못찾은 이유 : 테이블에서 null값을 '' 따옴표를 통해 문자 처리해놨었음

update emp set depart=null where emp_id='a666';   // 업데이트를 통해 다시 null값으로 바꿈

select emp_id,ename,salary
from emp
where depart is not null; // 위와 반대

-부서가 관리이면서 급여가 3000 이상인 사원
select emp_id,ename,salary
from emp
where depart='관리'and salary >= 3000;

-이름중 '이'가 들어간 사원 제외
select emp_id,ename,salary
from emp
where ename not like '%이%';

-사원번호 'a111','a555','a666'제외한 나머지 조회
select emp_id,ename,salary
from emp
where emp_id not in('a111','a555','a666');

-급여가 3000에서 4000사이 제외
select emp_id,ename,salary
from emp
where salary not between 3000 and 4000;

-오름차순 내림차순
select emp_id,ename,salary
from emp
order by salary;

select emp_id,ename,salary
from emp
order by salary asc;

select emp_id,ename,salary
from emp
order by salary desc;

select emp_id,ename,salary
from emp
order by ename;

select emp_id,ename,salary
from emp
order by emp_id;

select emp_id,ename,salary,depart
from emp
order by depart;

-부서순으로 정렬하고 부서가 같으면 급여순으로 정렬하기
select emp_id,ename,salary,depart
from emp
order by depart asc,salary desc;

=====================================================
create table sungjuk(
no number(4),
hakbun number(2) not null,
id varchar2(20),
name varchar(20),
email varchar(20),
kor number(3),
eng number(3),
mat number(3)
);

create sequence sungjuk_no;

insert into sungjuk values
(sungjuk_no.nextval,11,'a1','김찬중','k@k.com',80,70,90);
insert into sungjuk values
(sungjuk_no.nextval,22,'b1','이호철','l@l.com',76,38,89);
insert into sungjuk values
(sungjuk_no.nextval,33,'c1','양선생','y@y.com',90,70,80);
insert into sungjuk values
(sungjuk_no.nextval,44,'d1','파선생',null,45,20,100);
insert into sungjuk values
(sungjuk_no.nextval,55,'e1','홍길동',null,100,100,100);

-no 역순 출력
select * from sungjuk order by no desc;

-no 역순 정렬하고 상위 2명만 출력
select * from(select * from sungjuk order by no desc)
where rownum <=2;

-이메일이 없는 레코드 출력
select * from sungjuk where email is null;

-이름에 '선'이 들어가면서 영어 점수가 60점 이상인 레코드 출력
select * from sungjuk where name like '%선%' and eng >= 60;

-이메일이 있는 레코드 출력
방법 1 ) select * from sungjuk where email is not null;
방법 2 ) select * from sungjuk where email like '%@%';

-학번이 33~55 사이의 레코드 출력
방법 1 ) select * from sungjuk where hakbun between 33 and 55;
방법 2 ) select * from sungjuk where hakbun>=33 and hakbun<=55;

-국어 점수가 80점 이상이면서 수학 점수가 90점 이상인 레코드 출력
select * from sungjuk where kor>=80 and mat>=90;

-국어 점수가 90점 이상이거나 이름이 '김'으로 시작하는 레코드 출력
select * from sungjuk where kor>=90 or name like '김%';

-학번이 33번 이상 이면서 영어 점수가 70점 이상인 레코드 출력
select * from sungjuk where hakbun>=33 and eng>=70;

-이름이 '생'으로 끝나고 이메일이 없는 레코드 출력
select * from sungjuk where name like '%생' and email is null;
select * from sungjuk where email is null and name like '%생';

-아이디가 e1인 사용자의 이메일을 'w@w.com' , 국어 점수를 80점으로 수정 출력
update sungjuk set email='w@w.com',kor=80 where id='e1';

-rollback
 transaction(insert,update,delete)작업 내용을 취소한다
 이전 commit한 곳 까지만 복구한다

-commit
 트랜젝션 처리 과정을 데이터 베이스에 반영하기 위해서 변경된 내용을 모두 영구 저장 한다
 이전 데이터가 완전히 update 된다

-drop ( 모두삭제 )
 테이블을 삭제하기 위해서 사용되며 저장 되어있던 데이터도 함께 삭제된다.
 delete : 테이블에서 데이터를 행 단위로 삭제 (1줄의 record만 삭제)
 truncate : 테이블의 모든 데이터만 삭제 (컬럼 제목만 남는다)
=====================================================================
create table salesman(
sno char(4) primary key, -- 차량 번호
sname nvarchar2(20) not null, -- 성명
hire date, -- 입사일
point number(4), -- 실적 포인트
branch nvarchar2(20) -- 지점
);

create table car(
cno char(2) primary key, -- 차량 번호
cname nvarchar2(20) not null, -- 차명
cc number(4), -- 배기량
weight number(4), -- 무게
outlet nvarchar2(20) -- 출고지
);

create table sale(
sno char(4) not null, -- 사번
cno char(2) not null, -- 차량번호
qty number(3) -- 판매량
);

insert into salesman values('s123','기필호','1998-10-12',200,'인천');
insert into salesman values('s202','김두한','2005-05-03',400,'경기');
insert into salesman values('s134','박성식','2002-03-01',100,'서울');
insert into salesman values('s241','임흥석','2003-06-02',300,'부산');
insert into salesman values('s345','최재현','2004-03-01',200,'광주');

insert into car values('c1','소나타',1800,1200,'서울');
insert into car values('c2','소나타',2000,1300,'서울');
insert into car values('c3','레조',1500,1100,'인천');
insert into car values('c4','레조',2000,1200,'인천');
insert into car values('c5','카니발',3000,1800,'광주');
insert into car values('c6','SM5',2000,1300,'부산');
insert into car values('c7','SM5',2000,1350,'부산');

insert into sale values('s123','c1',12);
insert into sale values('s123','c2',20);
insert into sale values('s123','c3',42);
insert into sale values('s123','c4',18);
insert into sale values('s123','c5',10);
insert into sale values('s123','c6',null);
insert into sale values('s202','c1',34);
insert into sale values('s202','c2',14);
insert into sale values('s134','c2',21);
insert into sale values('s241','c2',null);
insert into sale values('s241','c4',31);
insert into sale values('s123','c5',13);

-salesman 테이블의 모든 정보 검색
select * from salesman;

-판매된 승용차의 차량 번호를 중복 없이 검색
select distinct cno from sale;

-현재 판매중인 모든 차량의 차량명과 중량을 톤으로 환산하여 검색
select cname, weight*0.001 톤환산무게 from car; // weight*0.001로 출력되는게 보기 좋지 않아 '톤환산무게'로 바꾸며 검색

-인천이 출고지인 차량의 차량번호와 차량명을 검색
select cno, cname from car where outlet='인천';

-출고지가 부산이고 배기량이 2500cc 이상인 차량의 차량명과 배기량을 검색
select cno, cc from car where outlet='부산' and cc>=2500;

-영업 사원의 모든 정보를 실적이 낮은 순으로 검색
select * from salesman order by point;

-영업 사원의 모든 정보(sno,point,hire)를 실적 순으로 검색하되 실적이 같은 경우 입사한 순서로 정렬
select sno,point,hire from salesman order by point, hire;

-실적이 높은 영업사원 3명의 영업사원 모든 정보를 실적순으로 검색
select * from(select * from salesman order by point desc) where rownum <=3;

-실적이 2,3,4등인 영업사원의 모든 정보 검색
select * from
(select * from salesman where point not in(select max(point) from salesman) order by point
desc) where rownum<=3;

-전체 영업사원의 수를 검색
select count(*) from salesman;

-영업 사원들의 실적 점수의 평균을 검색
select avg( point ) 실적평균 from salesman;

-영업 사원별로 판매한 전체 차량의 대수를 조회
select sno,sum(qty )
from sale
group by sno;

-사원별로 세대 이상의 차량을 판매한 영업사원의 사번을 조회
select sno
from sale
group by sno	// 사원번호로 그룹을 묶는다
having count(*); >=3;

-차량명이 '소'로 시작하는 차량의 모든 정보를 조회
select * from car where cname like '소%';

-김씨가 아닌 영업사원의 사번과 이름을 조회
select sno,sname from salesman
where sname not like '김%';

-배기량이 널값인 차량의 차량번호와 차량명을 검색
select cno,cname from car where cc is null;

-차량번호 'c4'를 판매한 영업사원의 이름을 조회
select sname
from salesman s inner join sale s2
on s.sno= s2.sno and s2.cno='c4';

-'SM5' 차량을 판매한 사원의 이름을 조회
select s.sname
from salesman s inner join sale s2
on s.sno=s2.sno
join car c
on s2.cno=c.cno and c.cname='SM5';

-사번이 's123'인 사원 실적을 100점 증가
update salesman set point=point+100 where sno='s123';

-사번이 's345'인 사원의 레코드를 삭제
delete from salesman where sno='s345';

-부산에서 출고되는 모든 차량의 레코드를 삭제
delete from car where outlet='부산';

-사원 테이블의 모든 정보를 삭제
delete from salesman;


























